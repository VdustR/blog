<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>ViPro's Blog Blog</title>
        <link>https://vdustr.dev/blog/</link>
        <description>ViPro's Blog Blog</description>
        <lastBuildDate>Fri, 25 Feb 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Svelte 3 個人初體驗心得]]></title>
            <link>https://vdustr.dev/blog/2022/02/25/svelte-first-impression</link>
            <guid>/2022/02/25/svelte-first-impression</guid>
            <pubDate>Fri, 25 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[雖然有點晚了，但最近才比較有空稍微試玩了一下，寫了兩個小 repo ，有些小小心得在這裡紀錄一下。]]></description>
            <content:encoded><![CDATA[<p>雖然有點晚了，但最近才比較有空稍微試玩了一下，寫了兩個小 repo ，有些小小心得紀錄在這裡。</p><p><img src="https://vdustr.dev/asset-2022/02-25-svelte-first-impression/og.png" alt="Svelte First Impression"/></p><h2>優點</h2><p>為什麼會想嘗試 Svelte 3?</p><h3>好懂好上手</h3><p>基本上 <a href="https://svelte.dev/tutorial">官方教學</a> 跑過一次就差不多了，互動式寫得令人非常容易理解運作方式。</p><p>另外作者 <a href="https://twitter.com/Rich_Harris">Rich Harris</a> 的 <a href="https://youtu.be/AdNJ3fydeao">Rethinking reactivity</a> 分享設計理念的影片也非常值得一看。當中我很喜歡這句話：</p><p><img src="https://vdustr.dev/asset-2022/02-25-svelte-first-impression/framework.png" alt="Frameworks are not tools for organising your code, They are tools for organising your mind."/></p><p>我個人認為 React hooks, Vue composition API, Svelte 3 在寫法上有一定的相似之處，我不清楚這種開發方式是否有什麼具體的專有名詞。</p><p>我自己在寫 React 的時候有一些特別在意的事:</p><ul><li>Render 的時候會一直重複做多餘的事情，這點在 <a href="https://twitter.com/Rich_Harris">Rich Harris</a> 的 <a href="https://youtu.be/AdNJ3fydeao">Rethinking reactivity</a> 裡也有提到。這個問題 React 未來有機會透過 sformer 被解決 (<a href="https://youtu.be/lGEMwh32soc">黃玄 - React without memo</a>) 。</li><li>依賴 <a href="https://github.com/facebook/react/tree/0dedfcc/packages/eslint-plugin-react-hooks">eslint-plugin-react-hooks</a> ，寫起來相對囉嗦。像是 <code>useEffect</code> 如果是要監聽特定幾個值是否改變，使用 usePrevious compare 效能就差，寫起來也醜；使用 <code>eslint-disable-next-line</code> 維護上就會比較麻煩，可能需求上有調整就會漏東漏西而產生 side effect ，而我也很討厭 disable eslint rules。</li></ul><p>如果要我推坑的話我會如何簡介 Svelte 3?</p><ul><li><p>直接改值就是改 state，使用起來非常直覺，本身像是在寫 js 但也完全不是在寫 js 。可以說 svelte 本身就是一種獨樹一格卻又像 js 的語言，透過 Svelte 這個 compiler 編譯成真正的 js 給瀏覽器執行。<a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead#where-does-the-overhead-come-from">官方自已也是說 svelte 是 compiler</a>：</p><blockquote><p>This is almost exactly the update code that Svelte generates. Unlike traditional UI frameworks, Svelte is a compiler that knows at build time how things could change in your app, rather than waiting to do the work at run time.</p></blockquote></li><li><p><code>$:</code> 大概就像無腦版的 useMemo / computed + useEffect / watch</p></li><li><p>寫起來很爽</p></li><li><p>寫起來很爽</p></li><li><p>寫起來很爽</p></li></ul><h3>內建 store</h3><ul><li><a href="https://svelte.dev/docs#run-time-svelte-store"><code>svelte/store</code></a> 簡單好用。在 <code>.svelte</code> 裡也可以直接透過 <a href="https://svelte.dev/docs#component-format-script-4-prefix-stores-with-$-to-access-their-values"><code>$</code> prefix</a> 的方式取值，非常直覺。</li><li><code>derived()</code> 其實就像 <code>$:</code>。</li></ul><h3>內建 spring animate /</h3><p>內建 <a href="https://aerotwist.com/blog/flip-your-animations/">FLIP</a> move <a href="https://svelte.dev/docs#run-time-svelte-animate">animate</a> 和 <a href="https://svelte.dev/docs#run-time-svelte-transition">transition</a>。</p><p>使用的時候要注意目前 list item 有些小問題，詳細情況和 demo 可以參考我寫的 <a href="../22/likftc.md">likftc</a> ，不確定官方未來會不會做其他修正。</p><h2>Start kit</h2><ul><li>SPA: <a href="https://github.com/vitejs/vite">Vite</a></li><li>SSR / SSG: <a href="https://github.com/sveltejs/kit">SvelteKit</a></li><li>Markdown: <a href="https://github.com/pngwn/MDsveX">MDsveX</a></li></ul><h2>Issues</h2><p>說了這麼多優點，其實也是有遇到一些問題的。期待未來都可以解決，畢竟 Svelte 開發體驗非常優越！</p><h3>Svelte Kit 未內建 sitemap</h3><p>可以用: <a href="https://github.com/bartholomej/svelte-sitemap">bartholomej/svelte-sitemap</a></p><p>使用方式很簡單在使用 Svelte Kit 的 repository 的跟目錄下直接下指令就可以了:</p><pre><code class="language-bash">npx svelte-sitemap --domain https://example.com
</code></pre><h3>Generating <code>.d.ts</code></h3><p>要包 library 時會用到。 Svelte compiler 本身無法 generate <code>.d.ts</code> 。</p><p>官方的 language-tools 其實有內建 <a href="https://github.com/sveltejs/language-tools/blob/6ef2442/packages/svelte2tsx/src/emitDts.ts">emitDts</a> 但還沒有寫成文件。使用方式也很簡單：</p><pre><code class="language-ts">import { emitDts } from &quot;svelte2tsx&quot;;

const require = createRequire(import.meta.url);

await emitDts({
  declarationDir: &quot;/your/dist&quot;,
  svelteShimsPath: require.resolve(&quot;svelte2tsx/svelte-shims.d.ts&quot;),
  libRoot: &quot;/your/src&quot;,
});
</code></pre><p>目前無法直接整合 rollup，必須另外寫個 node script 執行。</p><h3>尚不支援 Generic Parameter Defaults</h3><p>目前 <a href="https://github.com/sveltejs/rfcs/pull/38">Generics 仍在 RFC</a> 。</p><pre><code class="language-ts">type T = $$Generic&lt;boolean&gt;; // extends boolean
</code></pre><p>效果類似:</p><pre><code class="language-ts">function MyFunctionComponent&lt;T extends boolean&gt;() {
  // ...
}

class MyClassComponent&lt;T extends boolean&gt; {
  // ...
}
</code></pre><p>尚不支援 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-3.html#generic-parameter-defaults">generic parameter defaults</a> , 我也把這個問題反應給該 PR 的作者了(<a href="https://github.com/sveltejs/rfcs/pull/38#issuecomment-1039834806">TypeScript: Explicitly Typing Props/Slots/Events + Generics #38</a>)。</p><h3>Component 可能不容易包得很彈性</h3><p>Element Directives 無法輕易直接轉移到 Component (會直接被 svelte 擋下來)。如果要讓 component 彈性很大的話不能像 react 那麼好處理。</p><p><code>$$restProps</code> / <code>$$props</code> 也不能像 react 可以那麼容易透過取得 <code>ComponentProps&lt;&gt;</code> 來繼承 children 的 prop types 。</p><h3>Custom hooks</h3><p>因為 Svelte compiler 並不支援 <code>.js</code> / <code>.ts</code>，所以 Svelte 的功能 (主要是 <a href="https://svelte.dev/docs#component-format-script-3-$-marks-a-statement-as-reactive"><code>$:</code></a> 和 <a href="https://svelte.dev/docs#component-format-script-4-prefix-stores-with-$-to-access-their-values"><code>$ prefix</code></a>) 並無法像 react 或 vue 那樣輕易無痛地將部分功能區塊輕易地抽出做成 custom hooks 。目前看到比較建議的做法 (<a href="https://gradientdescent.de/custom-hooks/#Mypreferredsolution">How to Implement Custom React Hooks in Svelte</a>) 而我也認同的是使用 <code>let:</code> directive，如此一來就可以避免 <code>.js</code> 或 <code>.ts</code> 無法使用 Svelte 特殊語法的問題，但結構上其實還是不像 react / vue custom hooks 那麼漂亮，太複雜的情境可能會出現包很多層的狀況。</p><p>Vue 的 Reactivity Transform 因為有 compile <code>.js</code> / <code>.ts</code> 而且寫法就是原生的 js 所以就不用擔心這個問題，但個人認為 <a href="https://vuejs.org/guide/extras/reactivity-sform.html#retaining-reactivity-across-function-boundaries">Retaining Reactivity Across Function Boundaries</a> 其實更難維護，所以 Vue 的話我可能會使用一般的 <code>ref()</code>， <a href="https://vuejs.org/guide/extras/reactivity-transform.html">Reactivity Transform</a> 還是需要觀望一下。</p><h2>個人結論</h2><p>綜合以上，我自己可能會在小巧、不需要包太多 component 、大多使用 vanilla elements 就能解決的靜態網站可以考慮使用 SvelteKit ；需要複雜功能的 app 應該還是會優先選擇 React 或 Vue ，尤其是拓展性 React 是相對簡單暴力的，但也仍然很期待 Svelte 未來的發展。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[likftc]]></title>
            <link>https://vdustr.dev/blog/2022/02/22/likftc</link>
            <guid>/2022/02/22/likftc</guid>
            <pubDate>Tue, 22 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[List item keys for transition components.]]></description>
            <content:encoded><![CDATA[<p>寫了一個小 library: <a href="https://vdustr.dev/likftc/">likftc</a></p><p>List item keys for transition components.</p><p>支援 react, vue, svelte</p><p><a href="https://vdustr.dev/likftc/"><img src="https://vdustr.dev/asset-2022/02-22-likftc/ogimage.png" alt="likftc"/></a></p><p>在玩 Svelte 的時候發現了一個現象， Svelte 的 <a href="https://svelte.dev/docs#template-syntax-element-directives-animate-fn"><code>animate:flip</code></a> 會和 <a href="https://svelte.dev/docs#template-syntax-element-directives-transition-fn"><code>transition:fn</code></a> 在 list item 快速變動時會發生衝突，造成某些 item 卡在不正確的地方。原因是在 component 的控制下， list item 是使用 key 來判斷是否使用同一個 DOM，無論是 framework 或 compiler 本身沒有將這件事情處理好，就有可能在 leaving (svelte 叫 outro) 時馬上又 render 相同 key 的 list item 時， component 又馬上拿同一個 dom 開始執行 entering (svelte 叫 intro) 的動畫，當這個動畫是使用 js 處理時就會打架。</p><p>範例看這裡: <a href="https://vdustr.dev/likftc/svelte">https://vdustr.dev/likftc/svelte</a></p><p>這個衝突只有在使用 js spring function 的時候發生，所以像 <a href="https://vdustr.dev/likftc/vue">Vue demo</a> 中使用 css 動畫頂多也是直接瞬移而已，並不會出現特別奇怪的畫面，使用 <a href="https://github.com/VdustR/likftc"><code>likftc</code></a> 的話也只是已經進入 leaving 的 component 直接 fade out 而新的就直接 render 新的 list item ，我認為沒有像 <a href="https://vdustr.dev/likftc/svelte">Svelte</a> 那麼必要。</p><p>範例看這裡: <a href="https://vdustr.dev/likftc/vue">https://vdustr.dev/likftc/vue</a></p><p>React 的部分我使用 <a href="https://github.com/aholachek/react-flip-toolkit">React FLIP Toolkit</a> 。情況比較特殊，他本身其實只有處理 FLIP 的部分，並沒有處理 entering 和 leaving，但他有提供 <code>onAppear</code> 和 <code>onExit</code> 等 event props 可以讓你在相對應的時間點對 element 執行其他行為。若使用 js 控制就會遇到和 svelte 類似的問題，這個問題甚至在 <a href="https://codesandbox.io/s/4q7qpkn8q0">官方範例</a> 都可以快速切換重現 (先按 exitAndFlipThenEnter 然後在動畫結束之前馬上按 exitThenFlipThenEnter) 。 但如果只是像 <a href="https://vdustr.dev/likftc/react/">React demo</a> 在 onAppear 和 onExit 直接使用 css (這裡使用 <a href="https://animate.style/">Animate.css</a>) 而不使用 js 來控制的話感覺就比較沒差。</p><p>範例看這裡: <a href="https://vdustr.dev/likftc/react">https://vdustr.dev/likftc/react</a></p><p>如果還是想使用 React FLIP Toolkit spring function 的 entering 和 leaving 可以參考 <a href="https://github.com/VdustR/likftc/blob/dd396932913177e64a7914a18bb159ee44885d14/packages/doc/src/lib/demo/react-flip-toolkit/With.tsx">這裡</a>。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Forked rollup-plugin-rename-extensions]]></title>
            <link>https://vdustr.dev/blog/2022/02/08/forked-rollup-plugin-rename-extensions</link>
            <guid>/2022/02/08/forked-rollup-plugin-rename-extensions</guid>
            <pubDate>Tue, 08 Feb 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[臨時 fork 了 一個 repo 解決 rollup-plugin-typescript2 + @betit/rollup-plugin-rename-extensions 無法並存 tslib.js 和 tslib.cjs 的問題。]]></description>
            <content:encoded><![CDATA[<p>臨時 fork 了 一個 repo 解決 rollup-plugin-typescript2 + @betit/rollup-plugin-rename-extensions 無法並存 tslib.js 和 tslib.cjs 的問題。</p><p><a href="https://github.com/vdustr/rollup-plugin-rename-extensions"><img src="https://vdustr.dev/asset-2022/02-08-forked-rollup-plugin-rename-extensions/ogimage.png" alt="Forked rollup-plugin-rename-extensions"/></a></p><p><a href="https://github.com/vdustr/rollup-plugin-rename-extensions">Repo 點這裡</a></p><p>在打包 library 時我並不喜歡使用像 <a href="https://github.com/jaredpalmer/tsdx">tsdx</a> 等 bundle 的方式，而是比較喜歡 <a href="https://rollupjs.org/guide/en/#outputpreservemodules">preserveModules</a> 保留原始結構，使用上能有更大的彈性。</p><p>目前為止 <a href="https://github.com/ezolenko/rollup-plugin-typescript2"><code>rollup-plugin-typescript2</code></a> 是我認為打包效果較好的工具，可以保留原始結構，也能生成結構一致的 <code>.d.ts</code>，並且對 <a href="https://github.com/Microsoft/tslib">tslib</a> 進行 tree shaking 並放到 <code>_virtual/_tslib.js</code>。</p><p>基於某些工具對 esm 支援仍不是很完美，我想同時打包 .js (esm) 和 .cjs 時，找到了個不錯的 <a href="https://github.com/GiG/rollup-plugin-rename-extensions">@betit/rollup-plugin-rename-extensions</a> 可以在 rollup build 時同時對副檔名進行調整，遺憾的是其依賴的 <a href="https://github.com/rollup/plugins/blob/6cd15b9/packages/pluginutils/src/createFilter.ts#L48">@rollup/pluginutils createFilter</a> 並不支援 <code>\0tslib.js</code> 這種 <code>facadeModuleId</code> ，或是說根本是直接將之排除在外了，因此我 fork 了 <a href="https://github.com/vdustr/rollup-plugin-rename-extensions">@vdustr/rollup-plugin-rename-extensions</a> 並加了一個 match option 來直接比對原始的 <code>facadeModuleId</code> 。</p><p>實際使用狀況的話可以參考<a href="https://github.com/VdustR/likftc/blob/59b66c2/script/rollup.config.js#L43">這裡</a>。</p><p>最後，我認為這只是暫時性的解法，目前只是先讓他能達到預期的效果而已，應該有更好更簡單的做法，歡迎大家來 <a href="http://ganhuaking.tw/">Discord 群</a> 一起交流。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[HTML To Svelte]]></title>
            <link>https://vdustr.dev/blog/2022/01/27/html-to-svelte</link>
            <guid>/2022/01/27/html-to-svelte</guid>
            <pubDate>Thu, 27 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[在先前寫的 Example for Svelte + TS + Vite + MDsveX 時，存在使用 shiki 將 code 轉為 html ，再將 html 作為 svelte component 使用的需求……]]></description>
            <content:encoded><![CDATA[<p><img src="https://vdustr.dev/asset-2022/01-27-html-to-svelte/og.png" alt="HTML To Svelte"/></p><p>在先前寫的 <a href="../../../2021/12/25/example-vite-svelte-markdown.md">Example for Svelte + TS + Vite + MDsveX</a> 時，存在使用 <a href="https://github.com/shikijs/shiki">shiki</a> 將 code 轉為 html ， <a href="https://github.com/VdustR/example-vite-svelte-markdown/blob/2f218cd/vite.config.js#L14">再將 html 作為 svelte component 使用</a> 的需求……</p><p>由於 shiki 產出的結果就是一堆 <code>&lt;span /&gt;</code> 自然我不太需要擔心 html attributes ，當時的想法是只要將 html tags 的 innerText 都強制轉成 svelte 的字串就好了，於是使用了這樣的方法，讓他使用 svelte element ：</p><pre><code class="language-ts">/**
 * Prevent removing leading and tailing spaces.
 * Transform `&lt;div&gt; foo &lt;/div&gt;` into `&lt;div&gt;{&#x27; foo &#x27;}&lt;/div&gt;`
 * @param {string} html
 */
function saveSvelteHtmlText(html) {
  return html.replace(/&gt;( *[^&lt;\n\r]+ *)&lt;/g, (match) =&gt; {
    const text = match.substring(1, match.length - 1);
    /**
     * We don&#x27;t need escape text here but we have to transform it into a svelte
     * string.
     *
     * For example:
     *   &lt;div&gt; &amp;lt;div&amp;gt; &lt;/div&gt;
     *   should be transformed to
     *   &lt;div&gt;{&quot; &lt;div&gt; &quot;}&lt;/div&gt;
     */
    const unescapeText = unescape(text);
    return &#x27;&gt;{&quot;&#x27; + unescapeText.replace(/&quot;/g, &#x27;\\&quot;&#x27;) + &#x27;&quot;}&lt;&#x27;;
  });
}
</code></pre><p>本來還覺得因為是直接使用正規而不是使用 parser 一直感到很不安，還寫了一堆註解說明，後來想想既然都是 html 了為什麼不直接用 svelte 原生的 <a href="https://svelte.dev/docs#template-syntax-html"><code>{@html ...}</code></a> 就好了？</p><pre><code class="language-ts">/**
 * @param {string} html
 */
function htmlToSvelte(html) {
  return `{@html \`${html.replace(/([`$])/g, &quot;\\$1&quot;)}\`}`;
}
</code></pre><p>同理 React 也可以使用 <a href="https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml"><code>dangerouslySetInnerHTML</code></a> ， Vue 則使用 <a href="https://vuejs.org/v2/guide/syntax.html#Raw-HTML"><code>v-html</code></a>。</p><p>原來的 repo 也修正了， <a href="https://github.com/VdustR/example-vite-svelte-markdown/commit/c790109">commit 請看這裡</a>。</p><p>真的是有夠 87 🤪</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[新 logo]]></title>
            <link>https://vdustr.dev/blog/2022/01/13/new-logo</link>
            <guid>/2022/01/13/new-logo</guid>
            <pubDate>Thu, 13 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[繼 2019/01 之後, 久違地更新了 Logo]]></description>
            <content:encoded><![CDATA[<p><img src="https://vdustr.dev/brand/2022-01/round.png" alt="Round Icon"/></p><p>繼 2019/01 之後, 久違地更新了 Logo</p><h2>Tech</h2><ul><li>Editors:<ul><li><a href="https://github.com/LibreSprite/LibreSprite">LibreSprite</a></li><li><a href="https://designer.gravit.io">Gravit</a></li></ul></li><li>Palette: db32</li><li>Font: <a href="https://github.com/TakWolf/ark-pixel-font">ark-pixel-12px-latin</a></li><li>Converters:<ul><li><a href="https://convertico.com">ConvertICO.com</a></li><li><a href="https://github.com/shrhdk/text-to-svg">text-to-svg</a></li><li><a href="https://github.com/kagof/pixel-perfect-svg">pixel-perfect-svg</a></li></ul></li></ul><p>另外 Docusaurus Palette 使用 <a href="https://swatcherapp.com">Swatcher</a>:</p><ul><li>h dif: -7</li><li>s dif: -10</li><li>b dif: 6</li></ul><h2>Source</h2><p><a href="https://github.com/VdustR/brand/tree/main/2022-01">https://github.com/VdustR/brand/tree/main/2022-01</a></p><h2>License</h2><p>CC0</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Pocket]]></title>
            <link>https://vdustr.dev/blog/2022/01/08/pocket</link>
            <guid>/2022/01/08/pocket</guid>
            <pubDate>Sat, 08 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[👀 Stay awhile and listen..]]></description>
            <content:encoded><![CDATA[<p><a href="https://vdustr.dev/pocket"><img src="https://vdustr.dev/asset-2022/01-08-pocket/og.png" alt="pocket"/></a></p><p>最近開始嘗試用 <a href="https://svelte.dev/">Svelte</a> 寫一些東西, 做了這個頁面, 主要是放一些 🔖 書籤和 <a href="https://github.com/VdustR?tab=stars">自己 ⭐ 的 Repositories</a> ， 方便搜尋用。</p><p>書籤的部分會陸續整理補上。</p><p>👉 <a href="https://vdustr.dev/pocket">https://vdustr.dev/pocket</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A TypeScript Fullstack GraphQL CodeGen Example]]></title>
            <link>https://vdustr.dev/blog/2022/01/04/example-graphql-fullstack-codegen</link>
            <guid>/2022/01/04/example-graphql-fullstack-codegen</guid>
            <pubDate>Tue, 04 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[This example will show you how to dev with typescript fullstack with GraphQL Code Generator.]]></description>
            <content:encoded><![CDATA[<p>最近試了一下 GraphQL CodeGen 產生 react-query 和 resolver type, node server 可以保證回應的型態正確, react-query functions 更可以直接使用, 真ㄉ 4 超方便的 R~</p><p>可以參考這個簡單的範例: <a href="https://github.com/VdustR/example-graphql-fullstack-codegen">https://github.com/VdustR/example-graphql-fullstack-codegen</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Example for Svelte + TS + Vite + MDsveX]]></title>
            <link>https://vdustr.dev/blog/2021/12/25/example-vite-svelte-markdown</link>
            <guid>/2021/12/25/example-vite-svelte-markdown</guid>
            <pubDate>Sat, 25 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[This is an example for importing Markdown files as Svelte components.]]></description>
            <content:encoded><![CDATA[<p>想在 svelte 使用 markdown, 看到已經有大大開發了個套件叫 <a href="https://github.com/pngwn/mdsvex">MDsveX</a>, 然而在使用的時候仍然踩到了一些問題, 寫個簡單的範例紀錄一下, 大部分的問題和解決方法都在 vite.config.js 的註解裡:</p><p>👉 <a href="https://github.com/VdustR/example-vite-svelte-markdown">https://github.com/VdustR/example-vite-svelte-markdown</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Better Discord]]></title>
            <link>https://vdustr.dev/blog/2021/12/21/better-discord</link>
            <guid>/2021/12/21/better-discord</guid>
            <pubDate>Tue, 21 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[讓 Discord 更美更好用的工具]]></description>
            <content:encoded><![CDATA[<p>:::info
這篇同時發佈在 <a href="https://ganhuaking.tw/blog/2021/12/11/better-discord/">蔣幹話軟體</a>
:::</p><p>Better Discord 是個能讓 Discord 高度客製的好用工具， 有廣大的社群維護許多好用的 Plugins 和 Themes， 使用者可以依照自己的喜好搭配調整。</p><h2>安裝</h2><p>首先先到 <a href="https://betterdiscord.app/">Better Discord</a> 官網 下載並安裝，</p><h2>安裝 PluginRepo</h2><p>安裝完成後 Discord 不需要重啟， 點擊 <img src="https://ganhuaking.tw/asset-2021/12-11-better-discord/userSettings.png" alt="User Settings"/> 後理論上會出現一個 Better Discord 的區塊：</p><p><img src="https://ganhuaking.tw/asset-2021/12-11-better-discord/plugins.png" alt="Plugins"/></p><p>接著進入 Plugins 頁面並點擊 <a href="https://ganhuaking.tw/asset-2021/12-11-better-discord/openPluginsFolder.png">Open Plugins Folder</a> ，到 <a href="https://betterdiscord.app/plugins?filter=repo">這裡</a> 下載 <a href="https://betterdiscord.app/plugin/PluginRepo">PluginRepo</a> 的 <code>.js</code> 檔後放進剛剛的目錄 ( <a href="https://betterdiscord.app/plugin/ThemeRepo">ThemeRepo</a> 也可以順便 )， 然後回到 Plugins 頁面將 PluginRepo 啟用：</p><p><img src="https://ganhuaking.tw/asset-2021/12-11-better-discord/enablePluginRepo.png" alt="Enable PluginRepo"/></p><p>接著會看到設定頁面左側選單多了 PluginRepo 的項目：</p><p><img src="https://ganhuaking.tw/asset-2021/12-11-better-discord/pluginRepo.png" alt="PluginRepo"/></p><p>進入之後就可以選擇自己喜歡的 plugins 安裝啦～ ( Theme 同理但是是使用 ThemeRepo)。 依照 Downloads 或 Stars 排序前幾個都滿好用的， 當然也有可能也有遺珠等待大家去發掘了！</p><h2>Custom CSS</h2><p>另外除了套用 Theme 也可以在 Custom CSS 的地方調整介面， 例如可以像這樣調整字型：</p><pre><code class="language-css">:root {
  --font-primary: &#x27;Victor Mono&#x27;, &#x27;jf-openhuninn-1.1&#x27;, Whitney, &#x27;Helvetica Neue&#x27;,
    Helvetica, Arial, sans-serif;
  --font-display: &#x27;Victor Mono&#x27;, &#x27;jf-openhuninn-1.1&#x27;, Ginto, &#x27;Helvetica Neue&#x27;,
    Helvetica, Arial, sans-serif;
  --font-code: &#x27;Victor Mono&#x27;, &#x27;jf-openhuninn-1.1&#x27;, Consolas, &#x27;Andale Mono WT&#x27;,
    &#x27;Andale Mono&#x27;, &#x27;Lucida Console&#x27;, &#x27;Lucida Sans Typewriter&#x27;,
    &#x27;DejaVu Sans Mono&#x27;, &#x27;Bitstream Vera Sans Mono&#x27;, &#x27;Liberation Mono&#x27;,
    &#x27;Nimbus Mono L&#x27;, Monaco, &#x27;Courier New&#x27;, Courier, monospace;
  --font-headline: &#x27;Victor Mono&#x27;, &#x27;jf-openhuninn-1.1&#x27;, Ginto Nord, Ginto, &#x27;Helvetica Neue&#x27;,
    Helvetica, Arial, sans-serif;
  --font-korean: &#x27;Victor Mono&#x27;, &#x27;jf-openhuninn-1.1&#x27;, Whitney,
    &#x27;Apple SD Gothic Neo&#x27;, &#x27;NanumBarunGothic&#x27;, &#x27;맑은 고딕&#x27;, &#x27;Malgun Gothic&#x27;,
    Gulim, 굴림, Dotum, 돋움, &#x27;Helvetica Neue&#x27;, Helvetica, Arial, sans-serif;
  --font-japanese: &#x27;Victor Mono&#x27;, &#x27;jf-openhuninn-1.1&#x27;, Whitney, Hiragino Sans, &#x27;ヒラギノ角ゴ ProN W3&#x27;,
    &#x27;Hiragino Kaku Gothic ProN&#x27;, &#x27;メイリオ&#x27;, Meiryo, Osaka, &#x27;MS PGothic&#x27;, &#x27;Helvetica Neue&#x27;,
    Helvetica, Arial, sans-serif;
  --font-chinese-simplified: &#x27;Victor Mono&#x27;, &#x27;jf-openhuninn-1.1&#x27;, Whitney,
    &#x27;Microsoft YaHei New&#x27;, 微软雅黑, &#x27;Microsoft Yahei&#x27;, &#x27;Microsoft JhengHei&#x27;,
    宋体, SimSun, &#x27;Helvetica Neue&#x27;, Helvetica, Arial, sans-serif;
  --font-chinese-traditional: &#x27;Victor Mono&#x27;, &#x27;jf-openhuninn-1.1&#x27;, Whitney,
    &#x27;Microsoft JhengHei&#x27;, 微軟正黑體, &#x27;Microsoft JhengHei UI&#x27;,
    &#x27;Microsoft YaHei&#x27;, 微軟雅黑, 宋体, SimSun, &#x27;Helvetica Neue&#x27;, Helvetica,
    Arial, sans-serif;
}
</code></pre><p>擅長前端的朋友們也可以自己在 Discord 按 <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>I</kbd> ( Mac OS 則是 <kbd>Command⌘</kbd> + <kbd>Option</kbd> + <kbd>I</kbd> ) 來看 style。</p><p>最後結果就能變像這樣子啦~</p><p><img src="https://ganhuaking.tw/asset-2021/12-11-better-discord/final.png" alt="final"/></p><ul><li>Theme - <a href="https://betterdiscord.app/theme/Dark%20Matter">DarkMatter</a></li><li>Fonts<ul><li><a href="https://rubjo.github.io/victor-mono/">Victor Mono</a></li><li><a href="https://justfont.com/huninn/">open 粉圓</a></li></ul></li></ul><p>我自己有遇到 Enable Transparency 開啟時 <a href="https://docs.microsoft.com/en-us/windows/powertoys/">PowerToys</a> 的 <a href="https://docs.microsoft.com/en-us/windows/powertoys/fancyzones">FancyZones</a> 無法正確定位的小問題， 關掉就沒事了。</p><p>另外 Better Discord 也有他們自己的 <a href="https://discord.com/invite/0Tmfo5ZbORCRqbAd">Discord Server</a> 。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Podman in WSL2]]></title>
            <link>https://vdustr.dev/blog/2021/09/20/podman-in-wsl2</link>
            <guid>/2021/09/20/podman-in-wsl2</guid>
            <pubDate>Mon, 20 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[3 分鐘 跟 podman 當好朋友]]></description>
            <content:encoded><![CDATA[<p>3 分鐘 跟 podman 當好朋友</p><h2>Install WSL2</h2><p>👉 <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">Windows Subsystem for Linux Installation Guide for Windows 10</a></p><h2>Install Ubuntu (Optional)</h2><p>👉 <a href="https://www.microsoft.com/en-us/p/ubuntu/9nblggh4msv6">Get Ubuntu - Microsoft Store</a></p><h2>Install podman</h2><p>👉 <a href="https://www.redhat.com/sysadmin/podman-windows-wsl2">How to run Podman on Windows with WSL2</a></p><h2>Install podman-compose</h2><p>Install python3 and pip:</p><pre><code class="language-bash">sudo apt-get -y install python3 python3-venv python3-pip
pip3 install podman-compose
</code></pre><p>Notice that you have to add <code>~/.local/bin</code> to <code>PATH</code></p><h3>Integrate podman-compose and fish</h3><p>Install the latest fish shell for <a href="https://fishshell.com/docs/current/cmds/fish_add_path.html"><code>fish_add_path</code></a> if your fish is &lt; <code>3.3.0</code>:</p><pre><code class="language-bash"># Check version
$ fish -v
fish, version 3.3.1

$ sudo apt-add-repository ppa:fish-shell/release-3
$ sudo apt-get update
$ sudo apt-get install fish
</code></pre><p>Check the <a href="https://fishshell.com/">official document</a> if you use another distribution.</p><p>Add into <code>~/.config/fish/config.fish</code>:</p><pre><code class="language-bash">fish_add_path ~/.local/bin
</code></pre><h2>Reference</h2><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">Windows Subsystem for Linux Installation Guide for Windows 10</a></li><li><a href="https://www.redhat.com/sysadmin/podman-windows-wsl2">How to run Podman on Windows with WSL2</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Migrate to Docusaurus v2]]></title>
            <link>https://vdustr.dev/blog/2021/04/01/move-to-docusaurus</link>
            <guid>/2021/04/01/move-to-docusaurus</guid>
            <pubDate>Thu, 01 Apr 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[This is my first post on Docusaurus 2.]]></description>
            <content:encoded><![CDATA[<p>I migrated my site to Docusaurus v2.</p><p>剛好今天愚人節。之後會開始在這邊寫開發紀錄吧！</p>]]></content:encoded>
        </item>
    </channel>
</rss>